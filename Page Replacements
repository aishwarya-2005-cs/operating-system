#include <stdio.h>
#include <stdbool.h>
#include <limits.h>

#define MAX_FRAMES 10

// Function to check if page is present in frames
bool isPagePresent(int frames[], int num_frames, int page) {
    for (int i = 0; i < num_frames; i++) {
        if (frames[i] == page) {
            return true;
        }
    }
    return false;
}

// Function to display frames
void displayFrames(int frames[], int num_frames, int fault) {
    for (int i = 0; i < num_frames; i++) {
        if (frames[i] == -1) {
            printf("- ");
        } else {
            printf("%d ", frames[i]);
        }
    }
    if (fault) {
        printf("(Page Fault)");
    }
    printf("\n");
}

// FIFO Page Replacement
void fifo(int ref_string[], int n, int num_frames) {
    int frames[MAX_FRAMES];
    int pointer = 0;
    int page_faults = 0;

    for (int i = 0; i < num_frames; i++) frames[i] = -1;

    printf("\nFIFO Page Replacement:\n");
    for (int i = 0; i < n; i++) {
        int current_page = ref_string[i];
        bool page_fault = !isPagePresent(frames, num_frames, current_page);

        if (page_fault) {
            frames[pointer] = current_page;
            pointer = (pointer + 1) % num_frames;
            page_faults++;
        }

        printf("PF No. %d: ", i+1);
        displayFrames(frames, num_frames, page_fault);
    }
    printf("Total Page Faults: %d\n", page_faults);
}

// LRU Page Replacement
void lru(int ref_string[], int n, int num_frames) {
    int frames[MAX_FRAMES];
    int time[MAX_FRAMES]; // To track last used time
    int page_faults = 0;

    for (int i = 0; i < num_frames; i++) {
        frames[i] = -1;
        time[i] = 0;
    }

    printf("\nLRU Page Replacement:\n");
    for (int i = 0; i < n; i++) {
        int current_page = ref_string[i];
        bool page_fault = !isPagePresent(frames, num_frames, current_page);

        if (!page_fault) {
            // Update time for existing page
            for (int j = 0; j < num_frames; j++) {
                if (frames[j] == current_page) {
                    time[j] = i + 1;
                    break;
                }
            }
        } else {
            // Find LRU page to replace
            int lru_index = 0, min_time = time[0];
            for (int j = 1; j < num_frames; j++) {
                if (time[j] < min_time) {
                    min_time = time[j];
                    lru_index = j;
                }
            }
            frames[lru_index] = current_page;
            time[lru_index] = i + 1;
            page_faults++;
        }

        printf("PF No. %d: ", i+1);
        displayFrames(frames, num_frames, page_fault);
    }
    printf("Total Page Faults: %d\n", page_faults);
}

// Optimal Page Replacement
void optimal(int ref_string[], int n, int num_frames) {
    int frames[MAX_FRAMES];
    int page_faults = 0;

    for (int i = 0; i < num_frames; i++) frames[i] = -1;

    printf("\nOptimal Page Replacement:\n");
    for (int i = 0; i < n; i++) {
        int current_page = ref_string[i];
        bool page_fault = !isPagePresent(frames, num_frames, current_page);

        if (!page_fault) {
            // Page is already in frame
            continue;
        } else {
            // Find page that won't be used for longest time
            int replace_index = 0, farthest = i;
            for (int j = 0; j < num_frames; j++) {
                int k;
                for (k = i + 1; k < n; k++) {
                    if (frames[j] == ref_string[k]) {
                        if (k > farthest) {
                            farthest = k;
                            replace_index = j;
                        }
                        break;
                    }
                }
                // If page not found in future, it's the best to replace
                if (k == n) {
                    replace_index = j;
                    break;
                }
            }
            frames[replace_index] = current_page;
            page_faults++;
        }

        printf("PF No. %d: ", i+1);
        displayFrames(frames, num_frames, page_fault);
    }
    printf("Total Page Faults: %d\n", page_faults);
}

int main() {
    int ref_string[] = {1, 4, 2, 3, 2, 1};
    int n = sizeof(ref_string) / sizeof(ref_string[0]);
    int num_frames = 3;

    fifo(ref_string, n, num_frames);
    lru(ref_string, n, num_frames);
    optimal(ref_string, n, num_frames);

    return 0;
}
